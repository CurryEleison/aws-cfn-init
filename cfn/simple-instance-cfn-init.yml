---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Launch Windows instance and configure with cfn-init"
Parameters:
  Namespace:
    Description: Environment. Used to identify various things as they are created
    Type: String
    Default: Development
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance
    Type : AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-windows-latest/Windows_Server-2022-English-Full-Base"
  IAMRole:
    Description: EC2 attached IAM role
    Type: String
    Default: DevOpsWindows
    ConstraintDescription: must be an existing IAM role which will be attached to EC2 instance.
  SecurityGroups:
    Description: The security group to use
    Type: List<AWS::EC2::SecurityGroup::GroupName>
    ConstraintDescription: Must be valid security group(s)
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_setupCfnHup
            - 01_CfnHup_service
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - 99_install_amazon_codedeploy_agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        00_setupCfnHup:
          files:
             "c:\\cfn\\cfn-hup.conf":
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
             "c:\\cfn\\hooks.d\\amazon-cloudwatch-agent-auto-reloader.conf":
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=cfn-init.exe -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
        01_CfnHup_service:
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "c:\\cfn\\cfn-hup.conf"
                  - "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json":
              content: !Sub |
                {
                  "logs": {
                      "logs_collected": {
                          "files": {
                              "collect_list": [
                                  {
                                      "file_path": "C:\\ProgramData\\Amazon\\CodeDeploy\\log\\codedeploy-agent-log.txt",
                                      "log_group_name": "/${Namespace}/codedeploy",
                                      "log_stream_name": "{instance_id}",
                                      "retention_in_days": 120
                                  }
                              ]
                          },
                          "windows_events": {
                              "collect_list": [
                                  {
                                      "event_format": "text",
                                      "event_levels": [
                                          "INFORMATION",
                                          "WARNING",
                                          "ERROR",
                                          "CRITICAL"
                                      ],
                                      "event_name": "System",
                                      "log_group_name": "/${Namespace}/Eventlog/System",
                                      "log_stream_name": "{instance_id}",
                                      "retention_in_days": 120
                                  }
                              ]
                          }
                      }
                  },
                  "metrics": {
                      "aggregation_dimensions": [
                          [
                              "InstanceId"
                          ]
                      ],
                      "append_dimensions": {
                          "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                          "ImageId": "${!aws:ImageId}",
                          "InstanceId": "${!aws:InstanceId}",
                          "InstanceType": "${!aws:InstanceType}"
                      },
                      "metrics_collected": {
                          "LogicalDisk": {
                              "measurement": [
                                  "% Free Space"
                              ],
                              "metrics_collection_interval": 60,
                              "resources": [
                                  "*"
                              ]
                          },
                          "Memory": {
                              "measurement": [
                                  "% Committed Bytes In Use"
                              ],
                              "metrics_collection_interval": 60
                          },
                          "statsd": {
                              "metrics_aggregation_interval": 60,
                              "metrics_collection_interval": 60,
                              "service_address": ":8125"
                          }
                      }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
            02_start_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"
        # Must run last
        99_install_amazon_codedeploy_agent:
          commands:
            installation:
              command: C:\Downloads\Amazon\CodeDeployAgent\codedeploy-agent.msi

    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref IAMRole
      KeyName: !Ref KeyName
      ImageId: !Ref InstanceAMI
      SecurityGroups: !Ref SecurityGroups
      # Had no luck converting this to powershell
      UserData:
        Fn::Base64: !Sub |
          <script>
          mkdir "C:\Downloads\Amazon\AmazonCloudWatchAgent\"
          powershell -Command "Invoke-WebRequest -Uri https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi -OutFile C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi"
          mkdir "C:\Downloads\Amazon\CodeDeployAgent\"
          powershell -Command "Invoke-WebRequest -Uri https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/codedeploy-agent.msi -OutFile C:\Downloads\Amazon\CodeDeployAgent\codedeploy-agent.msi"
          C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi
          cfn-init.exe -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default
          cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
          </script>

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"
