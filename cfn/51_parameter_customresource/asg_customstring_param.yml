AWSTemplateFormatVersion: '2010-09-09'
Description: Stack with a launch template and cfn-init
Parameters:
  Namespace:
    Description: Environment. Used to identify various things as they are created
    Type: String
    Default: Development
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2'
Resources:
  BaseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  StringReflectorResourceBackend:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Use in a Custom resource to reflect back the input strings. Useful for use of `resolve` constructs"
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import urllib.request
          import json
          import logging
          def handler(event, context):
            # print(event)
            response = {
              "StackId": event["StackId"],
              "RequestId": event["RequestId"],
              "LogicalResourceId": event["LogicalResourceId"],
              "Status": "SUCCESS",
              "Data": {"IsTrue": "true"} | event["ResourceProperties"]
            }
            if event.get("PhysicalResourceId", False):
                response["PhysicalResourceId"] = event["PhysicalResourceId"]
            else:
                response["PhysicalResourceId"] = event["LogicalResourceId"] + "-12345"
            serialized = json.dumps(response).encode('utf8')
            # print(serialized)
            req = urllib.request.Request(
              url=event['ResponseURL'],
              method='PUT',
              data=serialized,
              headers={
                'Content-Length': len(serialized),
                'Content-Type': '',
              }
            )
            with urllib.request.urlopen(req) as f:
              pass
  StringReflector:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt StringReflectorResourceBackend.Arn
      SecurityGroups: !Sub "{{resolve:ssm:/${Namespace}/SecurityGroups}}"
      SubNets: !Sub "{{resolve:ssm:/${Namespace}/Subnets}}"
  ParameterReadPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Roles:
        - !Ref AsgRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ssm:DescribeParameters"
            Resource: "*"
          - Effect: Allow
            Action:
              - "ssm:GetParameter*"
            Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:*:parameter/${Namespace}/*"
  CloudWatchRetentionInstancePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Roles:
        - !Ref AsgRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:PutRetentionPolicy"
            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:log-group:/${Namespace}/*"
  S3WorkPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Roles:
        - !Ref AsgRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - "s3:Get*"
            - "s3:List*"
            - "s3-object-lambda:Get*"
            - "s3-object-lambda:List*"
            Resource:
            - !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/${Namespace}/DeployZipBucket}}/*"
            - !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/${Namespace}/DeployZipBucket}}"
          - Effect: Allow
            Action: "s3:ListAllMyBuckets"
            Resource: "*"
  AsgRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
  AsgInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: [!Ref AsgRole]
  SimpleLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_config-amazon-cloudwatch-agent
            # - 03_restart_amazon-cloudwatch-agent
            - 99_install_amazon_codedeploy_agent
        01_config-amazon-cloudwatch-agent:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          commands:
            setup:
              command: !Sub "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:/${Namespace}/AmazonCloudWatch-linux"
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        # 03_restart_amazon-cloudwatch-agent:
        #   commands:
        #     01_stop_service:
        #       command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
        #     02_start_service:
        #       command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"
        99_install_amazon_codedeploy_agent:
          packages:
            yum:
              ruby: []
              wget: []
          commands:
            download:
              command: !Sub wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install --output-document=/tmp/install
            enablecodedeployinstaller:
              command: chmod +x /tmp/install
            installcodedeploy:
              command: /tmp/install auto
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Sub "{{resolve:ssm:/${Namespace}/InstanceType}}"
        IamInstanceProfile: 
          Name: !Ref AsgInstanceProfile
        #KeyName: !Ref KeyName
        KeyName: !Sub "{{resolve:ssm:/${Namespace}/KeyName}}"
        # TODO: doesn't seem to work with multiple security groups
        SecurityGroupIds: !Split [",", !GetAtt StringReflector.SecurityGroups]
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SimpleLaunchTemplate --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Environment
                Value: !Ref Namespace
              - Key: Name
                Value: !Ref "AWS::StackName"
  SimpleScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref SimpleLaunchTemplate
        Version: !GetAtt SimpleLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'
      VPCZoneIdentifier: !Split [",", !GetAtt StringReflector.SubNets]
