AWSTemplateFormatVersion: '2010-09-09'
Description: Deployment parts of stack.
Parameters:
  Namespace:
    Description: Environment. Used to identify various things as they are created
    Type: String
    Default: Development
Resources:
  CodeDeployServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CodeDeployTrustPolicy
          Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  CdApplication:
    Type: AWS::CodeDeploy::Application
  CdDeployConfig:
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties:
      ComputePlatform: Server
      MinimumHealthyHosts:
        Value: 0
        Type: "HOST_COUNT"
      # TrafficRoutingConfig:
      #   Type: AllAtOnce
  CdDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CdApplication
      AutoScalingGroups: 
        - "Fn::ImportValue": !Sub  "ArmAsg:${Namespace}:ScalingGroupName"
      LoadBalancerInfo:
        # The tortured whitespace is intentional. Well-formed YAML can't have two mappings on a single line
        TargetGroupInfoList:
          - Name: 
              "Fn::ImportValue": !Sub "ArmAsg:${Namespace}:TargetGroupName"
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITH_TRAFFIC_CONTROL
      Deployment:
        Description: Initial deployment
        IgnoreApplicationStopFailures: 'true'
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Sub "{{resolve:ssm:/${Namespace}/DeployZipBucket}}"
            Key: !Sub "{{resolve:ssm:/${Namespace}/DeployZipKey}}"
            BundleType: Zip
      ServiceRoleArn: !GetAtt CodeDeployServiceIAMRole.Arn
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: '*'
  AppPipeline: 
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      Name: s3-events-pipeline
      RoleArn: 
        !GetAtt CodePipelineServiceRole.Arn
      Stages: 
        - 
          Name: Source
          Actions: 
            - 
              Name: SourceAction
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts: 
                - Name: SourceOutput
              Configuration: 
                S3Bucket: !Sub "{{resolve:ssm:/${Namespace}/DeployZipBucket}}"
                S3ObjectKey: !Sub "{{resolve:ssm:/${Namespace}/DeployZipKey}}"
                PollForSourceChanges: false
              RunOrder: 1
        - 
          Name: Beta
          Actions: 
            - 
              Name: BetaAction
              InputArtifacts: 
                - Name: SourceOutput
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration: 
                ApplicationName: !Ref CdApplication
                DeploymentGroupName: !Ref CdDeploymentGroup
              RunOrder: 1
      ArtifactStore: 
        Type: S3
        Location: !Sub "{{resolve:ssm:/${Namespace}/DeployZipBucket}}"
  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub 
                  - "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
                  - Pipeline: !Ref AppPipeline
                #Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
            - CompleteMultipartUpload
          resources:
            ARN:
              - !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/${Namespace}/DeployZipBucket}}/{{resolve:ssm:/${Namespace}/DeployZipKey}}"
              #- !Join [ '', [ !GetAtt SourceBucket.Arn, '/', !Ref SourceObjectKey ] ]
      Targets:
        -
          Arn: !Sub 
                  - "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}"
                  - Pipeline: !Ref AppPipeline
            #!Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref AppPipeline ] ]
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: codepipeline-AppPipeline
