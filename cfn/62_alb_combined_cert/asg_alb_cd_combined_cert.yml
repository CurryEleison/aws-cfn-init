AWSTemplateFormatVersion: '2010-09-09'
Description: Stack with a launch template and cfn-init
Parameters:
  Namespace:
    Description: Environment. Used to identify various things as they are created
    Type: String
    Default: Development
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2'
Resources:
  BaseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  StringReflectorResourceBackend:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Use in a Custom resource to reflect back the input strings. Useful for use of `resolve` constructs"
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt BaseLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import urllib.request
          import json
          import logging
          def handler(event, context):
            # print(event)
            response = {
              "StackId": event["StackId"],
              "RequestId": event["RequestId"],
              "LogicalResourceId": event["LogicalResourceId"],
              "Status": "SUCCESS",
              "Data": {"IsTrue": "true"} | event["ResourceProperties"]
            }
            if event.get("PhysicalResourceId", False):
                response["PhysicalResourceId"] = event["PhysicalResourceId"]
            else:
                response["PhysicalResourceId"] = event["LogicalResourceId"] + "-12345"
            serialized = json.dumps(response).encode('utf8')
            # print(serialized)
            req = urllib.request.Request(
              url=event['ResponseURL'],
              method='PUT',
              data=serialized,
              headers={
                'Content-Length': len(serialized),
                'Content-Type': '',
              }
            )
            with urllib.request.urlopen(req) as f:
              pass
  StringReflector:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt StringReflectorResourceBackend.Arn
      SecurityGroups: !Sub "{{resolve:ssm:/${Namespace}/SecurityGroups}}"
      SubNets: !Sub "{{resolve:ssm:/${Namespace}/Subnets}}"
  CustomAcmCertificateLambda:
    Metadata:
      Source: https://github.com/dflook/cloudformation-dns-certificate
      Version: 1.7.4
    Properties:
      Code:
        ZipFile: "k=Exception\nT=True\nS=RuntimeError\nimport copy,hashlib,json,logging as B,time\nfrom boto3 import client as K\nfrom botocore.exceptions import ClientError as A3,ParamValidationError as\
          \ A4\nfrom urllib.request import Request,urlopen\nA=B.getLogger()\nA.setLevel(B.INFO)\nD=A.info\nX=A.exception\nR=copy.copy\nY=time.sleep\nZ=lambda j:json.dumps(j,sort_keys=T).encode()\nL='R'\n\
          def handler(A,l):\n\tA2='OldResourceProperties';A1='Update';A0='Delete';z='None';y='acm';x='FAILED';w='properties';v='stack-id';u='logical-id';t='DNS';j='Old';i='Certificate';h='LogicalResourceId';g='ValidationMethod';f='Route53RoleArn';e='Region';W='RequestType';V='StackId';U=None;Q='Status';P='Key';O='';N='DomainValidationOptions';M='DomainName';J='ResourceProperties';I='cloudformation:';H='Value';G='CertificateArn';F='Tags';C='PhysicalResourceId';m=l.get_remaining_time_in_millis;D(A)\n\
          \tdef n():\n\t\tD=R(B)\n\t\tfor H in ['ServiceToken',e,F,f]:D.pop(H,U)\n\t\tif g in B:\n\t\t\tif B[g]==t:\n\t\t\t\tfor I in set([B[M]]+B.get('SubjectAlternativeNames',[])):r(I)\n\t\t\t\tdel D[N]\n\
          \t\tA[C]=E.request_certificate(IdempotencyToken=A6,**D)[G];s()\n\tdef a(B):\n\t\twhile T:\n\t\t\ttry:E.delete_certificate(**{G:B});return\n\t\t\texcept A3 as C:\n\t\t\t\tX(O);A=C.response['Error']['Code']\n\
          \t\t\t\tif A=='ResourceInUseException':\n\t\t\t\t\tif m()/1000<30:raise\n\t\t\t\t\tY(5);continue\n\t\t\t\tif A in['ResourceNotFoundException','ValidationException']:return\n\t\t\t\traise\n\t\t\
          \texcept A4:return\n\tdef b(J):\n\t\tfor K in E.get_paginator('list_certificates').paginate():\n\t\t\tfor B in K['CertificateSummaryList']:\n\t\t\t\tD(B)\n\t\t\t\tif J[M].lower()==B[M]:\n\t\t\t\
          \t\tC={A[P]:A[H]for A in E.list_tags_for_certificate(**{G:B[G]})[F]}\n\t\t\t\t\tif C.get(I+u)==A[h]and C.get(I+v)==A[V]and C.get(I+w)==c(J):return B[G]\n\tdef o():\n\t\tif L in A:raise S('Certificate\
          \ not issued in time')\n\t\tA[L]=L;D(A);K('lambda').invoke(FunctionName=l.invoked_function_arn,InvocationType='Event',Payload=Z(A))\n\tdef p():\n\t\twhile m()/1000>30:\n\t\t\tB=E.describe_certificate(**{G:A[C]})[i];D(B)\n\
          \t\t\tif B[Q]=='ISSUED':return T\n\t\t\telif B[Q]==x:raise S(B.get('FailureReason',O))\n\t\t\tY(5)\n\t\treturn False\n\tdef A5():B=R(A[j+J]);B.pop(F,U);C=R(A[J]);C.pop(F,U);return B!=C\n\tdef\
          \ q():\n\t\tX='Type';W='Name';V='HostedZoneId';S='ValidationStatus';R='PENDING_VALIDATION';J='ResourceRecord'\n\t\tif B.get(g)!=t:return\n\t\twhile T:\n\t\t\tI=E.describe_certificate(**{G:A[C]})[i];D(I)\n\
          \t\t\tif I[Q]!=R:return\n\t\t\tif not[A for A in I.get(N,[{}])if S not in A or J not in A]:break\n\t\t\tY(1)\n\t\tfor F in I[N]:\n\t\t\tif F[S]==R:O=r(F[M]);P=O.get(f,B.get(f));L=K('sts').assume_role(RoleArn=P,RoleSessionName=(i+A[h])[:64],DurationSeconds=900)['Credentials']if\
          \ P is not U else{};Z=K('route53',aws_access_key_id=L.get('AccessKeyId'),aws_secret_access_key=L.get('SecretAccessKey'),aws_session_token=L.get('SessionToken')).change_resource_record_sets(**{V:O[V],'ChangeBatch':{'Comment':'Domain\
          \ validation for '+A[C],'Changes':[{'Action':'UPSERT','ResourceRecordSet':{W:F[J][W],X:F[J][X],'TTL':60,'ResourceRecords':[{H:F[J][H]}]}}]}});D(Z)\n\tdef r(D):\n\t\tC='.';D=D.rstrip(C);E={A[M].rstrip(C):A\
          \ for A in B[N]};A=D.split(C)\n\t\twhile len(A):\n\t\t\tif C.join(A)in E:return E[C.join(A)]\n\t\t\tA=A[1:]\n\t\traise S(N+' missing for '+D)\n\tc=lambda v:hashlib.new('md5',Z(v)).hexdigest()\n\
          \tdef s():B=R(A[J].get(F,[]));B+=[{P:I+u,H:A[h]},{P:I+v,H:A[V]},{P:I+'stack-name',H:A[V].split('/')[1]},{P:I+w,H:c(A[J])}];E.add_tags_to_certificate(**{G:A[C],F:B})\n\tdef d():\n\t\tD(A);B=urlopen(Request(A['ResponseURL'],Z(A),{'content-type':O},method='PUT'))\n\
          \t\tif B.status!=200:raise k(B)\n\ttry:\n\t\tA6=c(A['RequestId']+A[V]);B=A[J];E=K(y,region_name=B.get(e));A[Q]='SUCCESS'\n\t\tif A[W]=='Create':\n\t\t\tif L not in A:A[C]=z;n()\n\t\t\tq()\n\t\t\
          \tif not p():return o()\n\t\telif A[W]==A0:\n\t\t\tif A[C]!=z:\n\t\t\t\tif A[C].startswith('arn:'):a(A[C])\n\t\t\t\telse:a(b(B))\n\t\telif A[W]==A1:\n\t\t\tif A5():\n\t\t\t\tD(A1)\n\t\t\t\tif\
          \ b(B)==A[C]:\n\t\t\t\t\ttry:E=K(y,region_name=A[A2].get(e));D(A0);a(b(A[A2]))\n\t\t\t\t\texcept:X(O)\n\t\t\t\t\treturn d()\n\t\t\t\tif L not in A:n()\n\t\t\t\tq()\n\t\t\t\tif not p():return o()\n\
          \t\t\telse:\n\t\t\t\tif F in A[j+J]:E.remove_tags_from_certificate(**{G:A[C],F:A[j+J][F]})\n\t\t\t\ts()\n\t\telse:raise S(A[W])\n\t\treturn d()\n\texcept k as A7:X(O);A[Q]=x;A['Reason']=str(A7);return\
          \ d()"
      Description: Cloudformation custom resource for DNS validated certificates
      Handler: index.handler
      Role: !GetAtt 'CustomAcmCertificateLambdaExecutionRole.Arn'
      Runtime: python3.9
      Timeout: 900
    Type: AWS::Lambda::Function
  CustomAcmCertificateLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - acm:AddTagsToCertificate
                  - acm:DeleteCertificate
                  - acm:DescribeCertificate
                  - acm:RemoveTagsFromCertificate
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:acm:*:${AWS::AccountId}:certificate/*'
              - Action:
                  - acm:RequestCertificate
                  - acm:ListTagsForCertificate
                  - acm:ListCertificates
                Effect: Allow
                Resource:
                  - '*'
              - Action:
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource:
                  - arn:aws:route53:::hostedzone/*
            Version: '2012-10-17'
          PolicyName: !Sub '${AWS::StackName}CustomAcmCertificateLambdaExecutionPolicy'
    Type: AWS::IAM::Role
  ParameterReadPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Roles:
        - !Ref AsgRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ssm:DescribeParameters"
            Resource: "*"
          - Effect: Allow
            Action:
              - "ssm:GetParameter*"
            Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:*:parameter/${Namespace}/*"
  CloudWatchRetentionInstancePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Roles:
        - !Ref AsgRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:PutRetentionPolicy"
            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:log-group:/${Namespace}/*"
  S3WorkPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Roles:
        - !Ref AsgRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - "s3:Get*"
            - "s3:List*"
            - "s3-object-lambda:Get*"
            - "s3-object-lambda:List*"
            Resource:
            - !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/${Namespace}/DeployZipBucket}}/*"
            - !Sub "arn:${AWS::Partition}:s3:::{{resolve:ssm:/${Namespace}/DeployZipBucket}}"
          - Effect: Allow
            Action: "s3:ListAllMyBuckets"
            Resource: "*"
  AsgRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
  AsgInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: [!Ref AsgRole]
  SimpleLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_config-amazon-cloudwatch-agent
            # - 03_restart_amazon-cloudwatch-agent
            - 99_install_amazon_codedeploy_agent
        01_config-amazon-cloudwatch-agent:
          packages:
            yum:
              amazon-cloudwatch-agent: []
          commands:
            setup:
              command: !Sub "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:/${Namespace}/AmazonCloudWatch-linux"
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        # 03_restart_amazon-cloudwatch-agent:
        #   commands:
        #     01_stop_service:
        #       command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
        #     02_start_service:
        #       command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"
        99_install_amazon_codedeploy_agent:
          packages:
            yum:
              ruby: []
              wget: []
          commands:
            download:
              command: !Sub wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install --output-document=/tmp/install
            enablecodedeployinstaller:
              command: chmod +x /tmp/install
            installcodedeploy:
              command: /tmp/install auto
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Sub "{{resolve:ssm:/${Namespace}/InstanceType}}"
        IamInstanceProfile: 
          Name: !Ref AsgInstanceProfile
        #KeyName: !Ref KeyName
        KeyName: !Sub "{{resolve:ssm:/${Namespace}/KeyName}}"
        # TODO: doesn't seem to work with multiple security groups
        SecurityGroupIds: 
          - !Sub "{{resolve:ssm:/${Namespace}/SecurityGroups}}"
          - !GetAtt AlbToEc2SecurityGroup.GroupId
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SimpleLaunchTemplate --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Environment
                Value: !Ref Namespace
              - Key: Name
                Value: !Ref "AWS::StackName"
  SimpleScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref SimpleLaunchTemplate
        Version: !GetAtt SimpleLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'
      VPCZoneIdentifier: !Split [",", !Sub "{{resolve:ssm:/${Namespace}/Subnets}}"]
      TargetGroupARNs:
       - !Ref EC2TargetGroup
  AlbToEc2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic between ALB and EC2 instances"
      VpcId: !Sub "{{resolve:ssm:/${Namespace}/Vpc}}"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
  CodeDeployServiceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: CodeDeployTrustPolicy
          Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  CdApplication:
    Type: AWS::CodeDeploy::Application
  CdDeployConfig:
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties:
      ComputePlatform: Server
      MinimumHealthyHosts:
        Value: 0
        Type: "HOST_COUNT"
      # TrafficRoutingConfig:
      #   Type: AllAtOnce
  CdDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CdApplication
      AutoScalingGroups: 
        - !Ref SimpleScalingGroup
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt EC2TargetGroup.TargetGroupName
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITH_TRAFFIC_CONTROL
      Deployment:
        Description: Initial deployment
        IgnoreApplicationStopFailures: 'true'
        Revision:
          RevisionType: S3
          S3Location:
            Bucket: !Sub "{{resolve:ssm:/${Namespace}/DeployZipBucket}}"
            Key: !Sub "{{resolve:ssm:/${Namespace}/DeployZipKey}}"
            BundleType: Zip
      ServiceRoleArn: !GetAtt CodeDeployServiceIAMRole.Arn
  AlbCertificate:
    Type: Custom::DNSCertificate
    Properties: 
      DomainName: !Sub "{{resolve:ssm:/${Namespace}/FqdnForCertificate}}"
      DomainValidationOptions:
        - DomainName: !Sub "{{resolve:ssm:/${Namespace}/FqdnForCertificate}}"
          HostedZoneId: !Sub "{{resolve:ssm:/${Namespace}/HostedZoneId}}"
      ValidationMethod: DNS
      Region: !Sub "${AWS::Region}"
      ServiceToken: !GetAtt 'CustomAcmCertificateLambda.Arn'  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !Sub "{{resolve:ssm:/${Namespace}/Vpc}}"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Split [",", !GetAtt StringReflector.SubNets]
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      # Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !Sub "{{resolve:ssm:/${Namespace}/Vpc}}"
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  AlbHttpsListner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            !Ref AlbCertificate
  AlbDnsRecordSet:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Sub "{{resolve:ssm:/${Namespace}/HostedZoneId}}"
      RecordSets:
        - Name: !Sub "{{resolve:ssm:/${Namespace}/FqdnForCertificate}}"
          Type: A
          AliasTarget:
            DNSName: !GetAtt ApplicationLoadBalancer.DNSName
            HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
